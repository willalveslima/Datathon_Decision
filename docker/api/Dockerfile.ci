FROM google/cloud-sdk:slim

# Define o fuso horário para o contêiner.
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Define o diretório de trabalho dentro do contêiner.
WORKDIR /app

# Copia o arquivo requirements.txt ESPECÍFICO DA API para o diretório de trabalho.
# Este requirements.txt deve conter APENAS as dependências de produção da API.
COPY docker/api/requirements.txt .

# Instala as dependências Python.
RUN pip3 install --break-system-packages --no-cache-dir -r requirements.txt




# Cria o diretório para os modelos
RUN mkdir -p /app/models

# Baixa os arquivos do modelo do Cloud Storage.
# O Service Account usado pelo GitHub Actions (via google-github-actions/auth)
# precisa ter permissão de leitura (Storage Object Viewer) no bucket 'datathon-decision'.
# ATENÇÃO: Adapte o nome do seu bucket e os nomes dos arquivos se forem diferentes.


RUN gsutil cp gs://datathon-decision/models/logistic_regression_model.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/tfidf_vectorizer_applicant.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/tfidf_vectorizer_job.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/categorical_cols.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/encoded_feature_names.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/common_skills.pkl /app/models/
RUN gsutil cp gs://datathon-decision/models/model_version.txt /app/models/


# Copia o diretório 'src' que contém o código da sua API.
COPY src/ ./src/

# Expõe a porta em que a aplicação FastAPI será executada.
EXPOSE 8000

# Comando para iniciar a aplicação usando Uvicorn.
CMD ["uvicorn", "src.prediction_service.prediction_service:app", "--host", "0.0.0.0", "--port", "8000"]
